<?xml version="1.0" ?>
<build name="Build"   default="Main" initial="init">

    <!-- Benchmark_audit, OR focus, OR step and unit  -->


    <parameter name="Monitored" value="" description="Name of monitored focus"/>

    <target name="test">
    <echo>VAR IS: ${test} ${test2}</echo>
    </target>

    <target name="Main">

    <if>
        <not><equals arg1="${Monitored}" arg2=""/></not>
        <then>
        <echo>reset Monitored_focus</echo>
        <propertyregex property="Monitored_focus" input="${Monitored}" regexp="(.*)" replace="\1" defaultvalue="${Monitored}" override="true"/>

        <echo>reset ${Monitored_focus}</echo>
</then>
</if>
        <target name="get audit">
            <if>
                <available file="${Benchmark_audit}"/>
                <then>
                    <echo>COPYING</echo>
                    <copy file="${Benchmark_audit}" tofile="${logdir}/benchmark.qshtml"/>
                </then>
                <else>
                    <if>
                        <not><isset property="${Benchmark_focus}" /></not>
                        <then>
                            <!-- GET MATCHING BENCHMARK FOCUS -->
                            <echo>HERE</echo>
                            <propertyregex property="Mdate" input="${Monitored_focus}" regexp=".*(${date_pattern}).*" replace="\1"/>
                            <echo>Mdate ${Mdate}</echo>
                            <qsdateproperty property="Bdate" value="${Mdate}" inputpattern="${date_parse}" outputpattern="${date_parse}" offset="${offset}" unit="${unit}"/>
                            <echo>Bdate ${Bdate}</echo>
                            <propertyregex property="Binclude" override="true" input="${Binclude}" regexp="_date_" replace="${Bdate}" defaultvalue="${Binclude}"/> 
                            <echo>Binclude ${Binclude}</echo>
                            <fileset dir="${Bdir}" id="Dataset">
                                <include name="${Binclude}"/>
                            </fileset>

                            <pathconvert pathsep="," property="Dataset" refid="Dataset"/> 
                            <propertyregex property="Benchmark_focus" override="true" input="${Dataset}" regexp=".*," replace="" defaultvalue="${Dataset}"/> 
                            <echo message="Benchmark_focus to be used is ${Benchmark_focus}"/>   
                        </then>
                    </if>
                    <if>
                        <available file="${Benchmark_focus}"/>
                        <then>
                            <if>
                                <not>
                                    <equals arg1="${metadata}" arg2=""/>
                                </not>
                                <then>
                                    <qsimportmetadata input="${Benchmark_focus}" output="${logdir}/benchmark.ftr" metadata="${metadata}"/>
                                </then>
                            </if>
                            <if>    
                                <not>
                                    <equals arg1="${field_list}" arg2=""/>
                                </not>
                                <then>
                                    <qsaudit input="${logdir}/benchmark.ftr"  fields="${field_list}" output="${logdir}/benchmark.qshtml"/>
                                </then>
                                <elseif> 
                                    <not>
                                        <equals arg1="${xfield_list}" arg2=""/>
                                    </not>
                                    <then>
                                        <qsaudit input="${logdir}/benchmark.ftr" xfields="${xfield_list}" output="${logdir}/benchmark.qshtml"/>
                                    </then>
                                </elseif> 
                                <else>
                                    <qsaudit input="${logdir}/benchmark.ftr"  output="${logdir}/benchmark.qshtml"/>
                                </else>   
                            </if>
                        </then>
                    </if>
                </else>
            </if>

            <qsaudit overwrite="true" input="${Monitored_focus}" reference="${logdir}/benchmark.qshtml" output="${outdir}/report.qshtml"/>

            <qshtmlunpack input="${outdir}/report.qshtml" outputdir="${outdir}/report" />

        </target>

        <target name="Highlight report">
            <property name="td" value="&lt;td "/>
            <!-- table data attribute-->
            <!-- <td  -->
            <property name="deltapc" value="class=&quot;qsaudit_details_col_count_deltapc&quot;&gt;\s*&lt;div class=&quot;[^&quot;]+&quot;&gt;"/>
            <!-- class="qsaudit_colmindeltapc">	<div class="qs_deltavalue_eq"> -->
            <property name="deltapc_end" value="&lt;/div&gt;\s*&lt;/td&gt;"/>
            <!--</div> </td> -->
            <!-- NN or 5,6,7,9  -->
            <loadfile srcfile="${outdir}/report/qsreport.html" property="report">
                <filterchain>
                    <striplinebreaks/>
                    <tokenfilter>
                        <!-- highlight yellow  *deltapc over certain value -->
                        <!-- pattern="&lt;td (class=&quot;[^\s]*deltapc&quot;&gt;\s*&lt;div class=&quot;[^&quot;]+&quot;&gt;)(-?[1-9][0-9]{1,2}\.?[0-9]*)(&lt;/div&gt;\s*&lt;/td&gt;)" -->
                        <replaceregex
						pattern="${td}(${deltapc})(${threshold})(${deltapc_end})"
						replace="${td} bgcolor=&quot;yellow&quot; \1\2\3" flags="g"/>

                    </tokenfilter>
                </filterchain>
            </loadfile>
            <!-- 	<echo>${report}</echo> -->
            <echo file="${outdir}/highlights.html">${report}</echo>
        </target>


        <!--   <target name="Build MHT file">

            <fileset id="images"	dir="${logdir}/report/qsreport"    includes="*.png,*.svg"   	  />
            <pathconvert property="imagelist"   pathsep=","   refid="images"	 			  />
            <echo>IMAGELIST: ${imagelist}</echo>

            <echo file="${logdir}/imagelist.txt" append="false"/>
            <property name="links" value=""/>
            <foreach list="${imagelist}" param="image" inheritall="true">
                <tasks>
                    <propertyregex property="link" input="${image}" regexp=".*\\" replace="qsreport/" />
                    <echo file="${logdir}/imagelist.txt" append="true">${link} </echo>
                    <echo>LINK: ${link}</echo>
                </tasks>
            </foreach>

            <loadfile srcfile="${logdir}/imagelist.txt" property="imagefiles"/>

            <property name="jythonjar"  location="${env.QSHOME}/server/${env.QSVERSION}/java/thirdparty/jython.jar"/>

            <echo message="ARGUMENTS: -o ...report/TEST.mht -d ${logdir}/qsreport2.html ${imagefiles}"/>
            <delete file="${logdir}/qsreport.mht" />

            <java classname="html2mht"  classpath="html2mht.jar;${jythonjar}" fork="true">
                <arg value="-o"/>
                <arg file="${logdir}/report/TEST.mht"/>
                <arg value="-d"/>
                <arg file="${logdir}/report"/>
                <arg value="highlights.html"/>
                <arg line="${imagefiles}"/>
            </java>
        </target> -->

        <target name="Build Exceptions report">
            <echo>PATTERN "${td}(${deltapc})(${ten_percent_plus})(${deltapc_end})"</echo>
            <loadfile srcfile="${outdir}/report/qsreport.html" property="exceptions">
                <filterchain>
                    <striplinebreaks/>
                    <tokenfilter>
                        <!-- highlight yellow and *** deltapc over certain value -->
                        <replaceregex
						pattern="${td}(${deltapc})(${threshold})(${deltapc_end})"
						replace="${td} bgcolor=&quot;yellow&quot; \1***\2\3" flags="g"/>
                        <!-- Remove non-flagged table rows					-->
                        <replaceregex pattern="&lt;tr&gt;" replace="${line.separator}&lt;tr&gt;" flags="g"/>
                        <replaceregex pattern="&lt;tr&gt;(.*\*\*\*.*)&lt;/tr&gt;" replace="&lt;tr&gt;~\1&lt;/tr&gt;"  flags="g"/>
                        <replaceregex pattern="&lt;tr&gt;(.*Field.*)&lt;/tr&gt;" replace="&lt;tr&gt;~\1&lt;/tr&gt;"  flags="g"/>
                        <replaceregex pattern="&lt;tr&gt;(.*count\(\).*)&lt;/tr&gt;" replace="&lt;tr&gt;~\1&lt;/tr&gt;"  flags="g"/>
                        <replaceregex pattern="&lt;tr&gt;[^~].*&lt;/tr&gt;" replace=""  flags="g"/>
                        <replaceregex pattern="~" replace=""  flags="g"/>
                        <replaceregex pattern="\*\*\*" replace=""  flags="g"/>
                    </tokenfilter>

                    <striplinebreaks/>
                    <tokenfilter>
                        <!-- Remove non-tables	-->
                        <!-- Flag with ~, and put tables on individual lines	-->
                        <replaceregex pattern="&lt;table" replace="${line.separator}~&lt;br/&gt;&lt;table" flags="g"/>
                        <replaceregex pattern="&lt;/table&gt;" replace="&lt;/table&gt;${line.separator}" flags="g"/>
                    </tokenfilter>
                    <!--stuttering needed here for some reason -->
                    <tokenfilter>
                        <!--Remove non-tables (unflagged strings) -->
                        <replaceregex pattern="^[^~].*$" replace=""  flags="m"/>
                        <!-- remove tables with empty bodies -->
                        <replaceregex pattern="^.*&lt;tbody&gt;&lt;/tbody&gt;.*$" replace=""  flags="m"/>
                        <replaceregex pattern="~" replace=""  flags="g"/>

                    </tokenfilter>
                    <linecontains>
                        <contains value="table"/>
                    </linecontains>
                </filterchain>
            </loadfile>
            <echo>${exceptions}</echo>
            <echo file="${outdir}/exceptions.html">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-type&quot; content=&quot;text/html; charset=UTF-8&quot;/&gt;&lt;/head&gt;${exceptions}</echo>

            <property name="absout" location="${outdir}"/>
            <echo file="${absout}/wc2.bat">cat ${absout}\exceptions.html | wc -l &gt; count</echo>
            <exec executable="${absout}/wc2.bat"/>
            <loadfile srcfile="count" property="linecount"/>

            <echo message="number of exceptions: ${linecount}" />

            <if>
                <not>
                    <equals arg1="${linecount}" arg2="0" />
                </not>
                <then>
                        <propertyregex property="mon" input="${Monitored_focus}" regexp=".*[\\\/]" replace="" />
                    <propertyregex property="ben" input="${Benchmark_focus}" regexp=".*\\" replace="" />
                    <mail mailhost="r22epost.r22.local" 
                    mailport="25" 
                    from="portraituser@rikstoto.no" 
                    subject="Exceptions: ${linecount} exceptions found for ${mon} vs. ${ben}"
					message="${linecount} exceptions found for ${Monitored_focus} vs. ${Benchmark_focus} ${line.separator}${line.separator} ${exceptions}"
					messagemimetype="text/html" charset="ISO-8859-1" 
                    tolist="rob.simpson@pb.com" 
                    files="${absout}\highlights.html"
                    />		
                </then>
                <else>
                    <mail mailhost="r22epost.r22.local" 
                    mailport="25" 
                    from="portraituser@rikstoto.no" 
                    subject="Exceptions: :-) No exceptions found for ${Monitored_focus} vs. ${Benchmark_focus}"
					message="No exceptions found for ${Monitored_focus} vs. ${Benchmark_focus} \n \n  ${exceptions}"
					messagemimetype="text/html" charset="ISO-8859-1" 
                    tolist="rob.simpson@pb.com" 
                    files="${absout}\highlights.html"
                    />		
                </else>

            </if>

            <!--
<td class="qsaudit_colqinideltapc">	<table class="qs_deltavalue_pos">10</table>			</td>
<td class="([^\s]+deltapc)">\s+<table class="([^"]+)">(-?[0-9]+\.[0-9]*)</table>\s*</td>
&lt;td class=&quot;([^\s]*deltapc)&quot;&gt;\s*&lt;table class=&quot;([^&quot;]+)&quot;&gt;(-?[0-9]+\.?[0-9]*)&lt;/table&gt;\s*&lt;/td&gt;
<td class="([^\s]+deltapc)">\s+<table class="([^"]+)">(-?[0-9]+\.?[0-9]*)</table>\s*</td>
-->
        </target>

    </target>


    <target name="init">

    <loadproperties srcfile="test.params"/>
        <property name="five_percent_plus"      value="-?(?:[1-9][0-9]|[5-9])\.?[0-9]*"/>    
        <property name="ten_percent_plus"       value="-?[1-9][0-9]{1,2}\.?[0-9]*"/>
        <property name="twenty_percent_plus"    value="-?(?:[2-9][0-9]{1,2}|100)\.?[0-9]*"/>

        <if>
            <equals arg1="${percent_change}" arg2="5"/>
            <then>
                <property name="threshold" value="${five_percent_plus}"/>
            </then>
            <elseif>
                <equals arg1="${percent_change}" arg2="10"/>
                <then>
                    <property name="threshold" value="${ten_percent_plus}"/>
                </then>
            </elseif>
            <elseif>
                <equals arg1="${percent_change}" arg2="20"/>
                <then>
                    <property name="threshold" value="${twenty_percent_plus}"/>
                </then>
            </elseif>
        </if>

        <!-- NN or NNN -->

        <defaults  parallel="2" concurrent="false" outputproperty="true" logfile="BuildLogfile.log"/>
        <!-- Generally useful variables -->
        <property   name="Miner"   value="C:/PortraitMiner"  description="Root working directory"/>
        <property   name="dir"   value=".."  description="Root working directory"/>
        <property   name="logs"  value="${dir}/rundirs" description="Working directory"/>
        <property   name="outputlogs"  value="${dir}/logs" description="Log directory"/>
        <mkdir dir="${logs}"/>
        <mkdir dir="${outputlogs}"/>

        <tstamp>
            <format property="buildlabel" pattern="yyyyMMdd-HHmmss"/>
        </tstamp>
        <tstamp>
            <format property="today" pattern="yyyyMMdd"/>
        </tstamp>
        <!-- read env vars into env.xxx properties -->
        <property environment="env"/>
        <property name="slash" value="/"/>


        <!-- ######  Create timestamp for log unless 'run_directory' parameter is provided ##### -->
        <echo> run dir ${run_directory}</echo>
        <if>
            <equals arg1="${run_directory}" arg2="false"/>
            <then>
            <echo> run dir is false</echo>
                <property name="logdir" value="${logs}/Build_${buildlabel}" description="Output directory"/>
                <echo message="Setting property logdir to ${logdir}"/>
            </then>
            <else>
                <!-- Translate \ into / -->
                <propertyregex property="run_directory" input="${run_directory}" regexp="\\" replace="/" defaultvalue="${run_directory}" override="true"/>
                <!-- Is it a path? -->
                <propertyregex property="run_directory path" input="${run_directory}" regexp=".*/.*" replace="true" defaultvalue="false"/>
                <if>
                    <equals arg1="${run_directory path}" arg2="true"/>
                    <then>
                        <property name="logdir" value="${run_directory}" description="Output directory"/>
                    </then>
                    <else>
                        <!-- else put into /logs  -->
                        <property name="logdir" value="${logs}/${run_directory}" description="Output directory"/>
                    </else>
                </if>
                <!-- copy this script into log dir -->
                <basename property="buildscriptname" file="${qsbuild.file}" />
                <copy file="${qsbuild.file}" tofile="${logdir}/${buildlabel}_${buildscriptname}"/>
            </else>
        </if>
        <mkdir dir="${logdir}"/>
        <!-- copy this script into log dir -->
        <basename property="buildscriptname" file="${qsbuild.file}" />
        <copy file="${qsbuild.file}" tofile="${logdir}/${buildlabel}_${buildscriptname}"/>

        <property  name="outdir" 	value="${logdir}"/>
    </target>
    <!-- Init -->

</build>

